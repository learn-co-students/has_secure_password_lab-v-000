Rails.application.routes.draw do
  get '/login' => 'sessions#new'
  post '/login' => 'sessions#create'
  post '/logout' => 'sessions#destroy'

  resources :users, only: [:new, :create]

  root 'welcome#home'


  class UsersController < ApplicationController
    def new
    end

    def create
      @user = User.create(user_params)
      return redirect_to controller: 'users', action: 'new' unless @user.save
      session[:user_id] = @user.id
      redirect_to controller: 'welcome', action: 'home'
    end

    private

    def user_params
      params.require(:user).permit(:name, :password, :password_confirmation)
    end
  end


  class SessionsController < ApplicationController
    def new
    end

    def create
      user = User.find_by(name: params[:user][:name])

      user = user.try(:authenticate, params[:user][:password])

      return redirect_to(controller: 'sessions', action: 'new') unless user

      session[:user_id] = user.id

      @user = user

      redirect_to controller: 'welcome', action: 'home'
    end

    def destroy
      session.delete :user_id

      redirect_to '/'
    end
  end


  class ApplicationController < ActionController::Base
    # Prevent CSRF attacks by raising an exception.
    # For APIs, you may want to use :null_session instead.
    protect_from_forgery with: :exception
    before_action :current_user

    def current_user
      @user = (User.find_by(id: session[:user_id]) || User.new)
    end

    def logged_in?
      current_user.id != nil
    end

    def require_logged_in
      return redirect_to(controller: 'sessions', action: 'new') unless logged_in?
    end
  end

  class WelcomeController < ApplicationController
    before_action :require_logged_in

    def home
    end
  end
