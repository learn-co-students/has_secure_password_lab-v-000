class User < ActiveRecord::Base
  has_secure_password

# User is invalid if password and password_confirmation are both non-nil and don't match

# User is valid if password and password_confirmation match
# User is valid if password is set and password_confirmation is nil

# User authenticate returns the user if credentials match
# User authenticate returns falsey if credentials don't match

 def password=(new_password)
   salt = BCrypt::Engine::generate_salt
   hashed = BCrypt::Engine::hash_secret(new_password, salt)
   self.password_digest = salt + hashed
 end

 # authenticate(password: string) -> User?
 def authenticate(password)
   # Salts generated by generate_salt are always 29 chars long.
   salt = password_digest[0..28]
   hashed = BCrypt::Engine::hash_secret(password, salt)
   return nil unless (salt + hashed) == self.password_digest
 end
end
